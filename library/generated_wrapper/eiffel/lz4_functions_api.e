note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class LZ4_FUNCTIONS_API


feature -- Access

	lz4_version_number: INTEGER
		external
			"C inline use <lz4.h>"
		alias
			"[
				return LZ4_versionNumber ();
			]"
		end

	lz4_version_string: POINTER
		external
			"C inline use <lz4.h>"
		alias
			"[
				return LZ4_versionString ();
			]"
		end

	lz4_compress_default (src: POINTER; dst: POINTER; srcsize: INTEGER; dstcapacity: INTEGER): INTEGER
		external
			"C inline use <lz4.h>"
		alias
			"[
				return LZ4_compress_default ((char const*)$src, (char*)$dst, (int)$srcsize, (int)$dstcapacity);
			]"
		end

	lz4_decompress_safe (src: POINTER; dst: POINTER; compressedsize: INTEGER; dstcapacity: INTEGER): INTEGER
		external
			"C inline use <lz4.h>"
		alias
			"[
				return LZ4_decompress_safe ((char const*)$src, (char*)$dst, (int)$compressedsize, (int)$dstcapacity);
			]"
		end

	lz4_compress_bound (inputsize: INTEGER): INTEGER
		external
			"C inline use <lz4.h>"
		alias
			"[
				return LZ4_compressBound ((int)$inputsize);
			]"
		end

	lz4_compress_fast (src: POINTER; dst: POINTER; srcsize: INTEGER; dstcapacity: INTEGER; acceleration: INTEGER): INTEGER
		external
			"C inline use <lz4.h>"
		alias
			"[
				return LZ4_compress_fast ((char const*)$src, (char*)$dst, (int)$srcsize, (int)$dstcapacity, (int)$acceleration);
			]"
		end

	lz4_compress_fast_ext_state (state: POINTER; src: STRING_8; dst: STRING_8; srcsize: INTEGER; dstcapacity: INTEGER; acceleration: INTEGER): INTEGER 
		local
			src_c_string: C_STRING
			dst_c_string: C_STRING
		do
			create src_c_string.make (src)
			create dst_c_string.make (dst)
			Result := c_lz4_compress_fast_ext_state (state, src_c_string.item, dst_c_string.item, srcsize, dstcapacity, acceleration)
		ensure
			instance_free: class
		end

	lz4_compress_dest_size (src: STRING_8; dst: STRING_8; srcsizeptr: POINTER; targetdstsize: INTEGER): INTEGER 
		local
			src_c_string: C_STRING
			dst_c_string: C_STRING
		do
			create src_c_string.make (src)
			create dst_c_string.make (dst)
			Result := c_lz4_compress_dest_size (src_c_string.item, dst_c_string.item, srcsizeptr, targetdstsize)
		ensure
			instance_free: class
		end

	lz4_decompress_safe_partial (src: POINTER; dst: POINTER; srcsize: INTEGER; targetoutputsize: INTEGER; dstcapacity: INTEGER): INTEGER
		external
			"C inline use <lz4.h>"
		alias
			"[
				return LZ4_decompress_safe_partial ((char const*)$src, (char*)$dst, (int)$srcsize, (int)$targetoutputsize, (int)$dstcapacity);
			]"
		end

	lz4_compress_fast_continue (streamptr: LZ4_STREAM_U_UNION_API; src: STRING_8; dst: STRING_8; srcsize: INTEGER; dstcapacity: INTEGER; acceleration: INTEGER): INTEGER 
		local
			src_c_string: C_STRING
			dst_c_string: C_STRING
		do
			create src_c_string.make (src)
			create dst_c_string.make (dst)
			Result := c_lz4_compress_fast_continue (streamptr.item, src_c_string.item, dst_c_string.item, srcsize, dstcapacity, acceleration)
		ensure
			instance_free: class
		end

	lz4_decompress_safe_continue (lz4_streamdecode: LZ4_STREAM_DECODE_U_UNION_API; src: STRING_8; dst: STRING_8; srcsize: INTEGER; dstcapacity: INTEGER): INTEGER 
		local
			src_c_string: C_STRING
			dst_c_string: C_STRING
		do
			create src_c_string.make (src)
			create dst_c_string.make (dst)
			Result := c_lz4_decompress_safe_continue (lz4_streamdecode.item, src_c_string.item, dst_c_string.item, srcsize, dstcapacity)
		ensure
			instance_free: class
		end

	lz4_decompress_safe_using_dict (src: POINTER; dst: POINTER; srcsize: INTEGER; dstcapcity: INTEGER; dictstart: POINTER; dictsize: INTEGER): INTEGER
		external
			"C inline use <lz4.h>"
		alias
			"[
				return LZ4_decompress_safe_usingDict ((char const*)$src, (char*)$dst, (int)$srcsize, (int)$dstcapcity, (char const*)$dictstart, (int)$dictsize);
			]"
		end

	lz4_compress (src: POINTER; dest: POINTER; srcsize: INTEGER): INTEGER
		external
			"C inline use <lz4.h>"
		alias
			"[
				return LZ4_compress ((char const*)$src, (char*)$dest, (int)$srcsize);
			]"
		end

	lz4_compress_limited_output (src: POINTER; dest: POINTER; srcsize: INTEGER; maxoutputsize: INTEGER): INTEGER
		external
			"C inline use <lz4.h>"
		alias
			"[
				return LZ4_compress_limitedOutput ((char const*)$src, (char*)$dest, (int)$srcsize, (int)$maxoutputsize);
			]"
		end

	lz4_compress_with_state (state: POINTER; source: STRING_8; dest: STRING_8; inputsize: INTEGER): INTEGER 
		local
			source_c_string: C_STRING
			dest_c_string: C_STRING
		do
			create source_c_string.make (source)
			create dest_c_string.make (dest)
			Result := c_lz4_compress_with_state (state, source_c_string.item, dest_c_string.item, inputsize)
		ensure
			instance_free: class
		end

	lz4_compress_limited_output_with_state (state: POINTER; source: STRING_8; dest: STRING_8; inputsize: INTEGER; maxoutputsize: INTEGER): INTEGER 
		local
			source_c_string: C_STRING
			dest_c_string: C_STRING
		do
			create source_c_string.make (source)
			create dest_c_string.make (dest)
			Result := c_lz4_compress_limited_output_with_state (state, source_c_string.item, dest_c_string.item, inputsize, maxoutputsize)
		ensure
			instance_free: class
		end

	lz4_compress_continue (lz4_streamptr: LZ4_STREAM_U_UNION_API; source: STRING_8; dest: STRING_8; inputsize: INTEGER): INTEGER 
		local
			source_c_string: C_STRING
			dest_c_string: C_STRING
		do
			create source_c_string.make (source)
			create dest_c_string.make (dest)
			Result := c_lz4_compress_continue (lz4_streamptr.item, source_c_string.item, dest_c_string.item, inputsize)
		ensure
			instance_free: class
		end

	lz4_compress_limited_output_continue (lz4_streamptr: LZ4_STREAM_U_UNION_API; source: STRING_8; dest: STRING_8; inputsize: INTEGER; maxoutputsize: INTEGER): INTEGER 
		local
			source_c_string: C_STRING
			dest_c_string: C_STRING
		do
			create source_c_string.make (source)
			create dest_c_string.make (dest)
			Result := c_lz4_compress_limited_output_continue (lz4_streamptr.item, source_c_string.item, dest_c_string.item, inputsize, maxoutputsize)
		ensure
			instance_free: class
		end

	lz4_decompress_safe_with_prefix64k (src: POINTER; dst: POINTER; compressedsize: INTEGER; maxdstsize: INTEGER): INTEGER
		external
			"C inline use <lz4.h>"
		alias
			"[
				return LZ4_decompress_safe_withPrefix64k ((char const*)$src, (char*)$dst, (int)$compressedsize, (int)$maxdstsize);
			]"
		end

	lz4_decompress_fast_with_prefix64k (src: POINTER; dst: POINTER; originalsize: INTEGER): INTEGER
		external
			"C inline use <lz4.h>"
		alias
			"[
				return LZ4_decompress_fast_withPrefix64k ((char const*)$src, (char*)$dst, (int)$originalsize);
			]"
		end

	lz4_decompress_fast (src: POINTER; dst: POINTER; originalsize: INTEGER): INTEGER
		external
			"C inline use <lz4.h>"
		alias
			"[
				return LZ4_decompress_fast ((char const*)$src, (char*)$dst, (int)$originalsize);
			]"
		end

	lz4_decompress_fast_continue (lz4_streamdecode: LZ4_STREAM_DECODE_U_UNION_API; src: STRING_8; dst: STRING_8; originalsize: INTEGER): INTEGER 
		local
			src_c_string: C_STRING
			dst_c_string: C_STRING
		do
			create src_c_string.make (src)
			create dst_c_string.make (dst)
			Result := c_lz4_decompress_fast_continue (lz4_streamdecode.item, src_c_string.item, dst_c_string.item, originalsize)
		ensure
			instance_free: class
		end

	lz4_decompress_fast_using_dict (src: POINTER; dst: POINTER; originalsize: INTEGER; dictstart: POINTER; dictsize: INTEGER): INTEGER
		external
			"C inline use <lz4.h>"
		alias
			"[
				return LZ4_decompress_fast_usingDict ((char const*)$src, (char*)$dst, (int)$originalsize, (char const*)$dictstart, (int)$dictsize);
			]"
		end

feature -- Externals

	c_lz4_compress_fast_ext_state (state: POINTER; src: POINTER; dst: POINTER; srcsize: INTEGER; dstcapacity: INTEGER; acceleration: INTEGER): INTEGER
		external
			"C inline use <lz4.h>"
		alias
			"[
				return LZ4_compress_fast_extState ((void*)$state, (char const*)$src, (char*)$dst, (int)$srcsize, (int)$dstcapacity, (int)$acceleration);
			]"
		end

	c_lz4_compress_dest_size (src: POINTER; dst: POINTER; srcsizeptr: POINTER; targetdstsize: INTEGER): INTEGER
		external
			"C inline use <lz4.h>"
		alias
			"[
				return LZ4_compress_destSize ((char const*)$src, (char*)$dst, (int*)$srcsizeptr, (int)$targetdstsize);
			]"
		end

	c_lz4_compress_fast_continue (streamptr: POINTER; src: POINTER; dst: POINTER; srcsize: INTEGER; dstcapacity: INTEGER; acceleration: INTEGER): INTEGER
		external
			"C inline use <lz4.h>"
		alias
			"[
				return LZ4_compress_fast_continue ((LZ4_stream_t*)$streamptr, (char const*)$src, (char*)$dst, (int)$srcsize, (int)$dstcapacity, (int)$acceleration);
			]"
		end

	c_lz4_decompress_safe_continue (lz4_streamdecode: POINTER; src: POINTER; dst: POINTER; srcsize: INTEGER; dstcapacity: INTEGER): INTEGER
		external
			"C inline use <lz4.h>"
		alias
			"[
				return LZ4_decompress_safe_continue ((LZ4_streamDecode_t*)$lz4_streamdecode, (char const*)$src, (char*)$dst, (int)$srcsize, (int)$dstcapacity);
			]"
		end

	c_lz4_compress_with_state (state: POINTER; source: POINTER; dest: POINTER; inputsize: INTEGER): INTEGER
		external
			"C inline use <lz4.h>"
		alias
			"[
				return LZ4_compress_withState ((void*)$state, (char const*)$source, (char*)$dest, (int)$inputsize);
			]"
		end

	c_lz4_compress_limited_output_with_state (state: POINTER; source: POINTER; dest: POINTER; inputsize: INTEGER; maxoutputsize: INTEGER): INTEGER
		external
			"C inline use <lz4.h>"
		alias
			"[
				return LZ4_compress_limitedOutput_withState ((void*)$state, (char const*)$source, (char*)$dest, (int)$inputsize, (int)$maxoutputsize);
			]"
		end

	c_lz4_compress_continue (lz4_streamptr: POINTER; source: POINTER; dest: POINTER; inputsize: INTEGER): INTEGER
		external
			"C inline use <lz4.h>"
		alias
			"[
				return LZ4_compress_continue ((LZ4_stream_t*)$lz4_streamptr, (char const*)$source, (char*)$dest, (int)$inputsize);
			]"
		end

	c_lz4_compress_limited_output_continue (lz4_streamptr: POINTER; source: POINTER; dest: POINTER; inputsize: INTEGER; maxoutputsize: INTEGER): INTEGER
		external
			"C inline use <lz4.h>"
		alias
			"[
				return LZ4_compress_limitedOutput_continue ((LZ4_stream_t*)$lz4_streamptr, (char const*)$source, (char*)$dest, (int)$inputsize, (int)$maxoutputsize);
			]"
		end

	c_lz4_decompress_fast_continue (lz4_streamdecode: POINTER; src: POINTER; dst: POINTER; originalsize: INTEGER): INTEGER
		external
			"C inline use <lz4.h>"
		alias
			"[
				return LZ4_decompress_fast_continue ((LZ4_streamDecode_t*)$lz4_streamdecode, (char const*)$src, (char*)$dst, (int)$originalsize);
			]"
		end

feature -- Externals Address

end
