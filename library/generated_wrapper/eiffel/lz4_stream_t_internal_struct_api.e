note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class LZ4_STREAM_T_INTERNAL_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	hashtable: POINTER
			-- Access member `hashTable`
		require
			exists: exists
		do
			Result := c_hashtable (item)
		ensure
			result_correct: Result = c_hashtable (item)
		end

	currentoffset: INTEGER
			-- Access member `currentOffset`
		require
			exists: exists
		do
			Result := c_currentoffset (item)
		ensure
			result_correct: Result = c_currentoffset (item)
		end

	set_currentoffset (a_value: INTEGER) 
			-- Change the value of member `currentOffset` to `a_value`.
		require
			exists: exists
		do
			set_c_currentoffset (item, a_value)
		ensure
			currentoffset_set: a_value = currentoffset
		end

	dirty: INTEGER
			-- Access member `dirty`
		require
			exists: exists
		do
			Result := c_dirty (item)
		ensure
			result_correct: Result = c_dirty (item)
		end

	set_dirty (a_value: INTEGER) 
			-- Change the value of member `dirty` to `a_value`.
		require
			exists: exists
		do
			set_c_dirty (item, a_value)
		ensure
			dirty_set: a_value = dirty
		end

	tabletype: INTEGER
			-- Access member `tableType`
		require
			exists: exists
		do
			Result := c_tabletype (item)
		ensure
			result_correct: Result = c_tabletype (item)
		end

	set_tabletype (a_value: INTEGER) 
			-- Change the value of member `tableType` to `a_value`.
		require
			exists: exists
		do
			set_c_tabletype (item, a_value)
		ensure
			tabletype_set: a_value = tabletype
		end

	dictionary:  detachable STRING
			-- Access member `dictionary`
		require
			exists: exists
		do
			if attached c_dictionary (item) as l_ptr then
				Result := (create {C_STRING}.make_by_pointer (l_ptr)).string
			end
		ensure
			result_void: Result = Void implies c_dictionary (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_dictionary (a_value: STRING) 
			-- Change the value of member `dictionary` to `a_value`.
		require
			exists: exists
		do
			set_c_dictionary (item, (create {C_STRING}.make (a_value)).item )
		end

	dictctx: detachable LZ4_STREAM_T_INTERNAL_STRUCT_API 
			-- Access member `dictCtx`
		require
			exists: exists
		do
			if attached c_dictctx (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_dictctx (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_dictctx (item) 
		end

	set_dictctx (a_value: LZ4_STREAM_T_INTERNAL_STRUCT_API) 
			-- Set member `dictCtx`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_dictctx (item, a_value.item)
		ensure
			dictctx_set: attached dictctx as l_value implies l_value.item = a_value.item
		end

	dictsize: INTEGER
			-- Access member `dictSize`
		require
			exists: exists
		do
			Result := c_dictsize (item)
		ensure
			result_correct: Result = c_dictsize (item)
		end

	set_dictsize (a_value: INTEGER) 
			-- Change the value of member `dictSize` to `a_value`.
		require
			exists: exists
		do
			set_c_dictsize (item, a_value)
		ensure
			dictsize_set: a_value = dictsize
		end

feature {NONE} -- Implementation wrapper for struct struct LZ4_stream_t_internal

	sizeof_external: INTEGER 
		external
			"C inline use <lz4.h>"
		alias
			"sizeof(struct LZ4_stream_t_internal)"
		end

	c_hashtable (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <lz4.h>"
		alias
			"[
				((struct LZ4_stream_t_internal*)$an_item)->hashTable
			]"
		end

	c_currentoffset (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <lz4.h>"
		alias
			"[
				((struct LZ4_stream_t_internal*)$an_item)->currentOffset
			]"
		end

	set_c_currentoffset (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <lz4.h>"
		alias
			"[
				((struct LZ4_stream_t_internal*)$an_item)->currentOffset =  (unsigned int)$a_value
			]"
		ensure
			currentoffset_set: a_value = c_currentoffset (an_item)
		end

	c_dirty (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <lz4.h>"
		alias
			"[
				((struct LZ4_stream_t_internal*)$an_item)->dirty
			]"
		end

	set_c_dirty (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <lz4.h>"
		alias
			"[
				((struct LZ4_stream_t_internal*)$an_item)->dirty =  (unsigned short)$a_value
			]"
		ensure
			dirty_set: a_value = c_dirty (an_item)
		end

	c_tabletype (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <lz4.h>"
		alias
			"[
				((struct LZ4_stream_t_internal*)$an_item)->tableType
			]"
		end

	set_c_tabletype (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <lz4.h>"
		alias
			"[
				((struct LZ4_stream_t_internal*)$an_item)->tableType =  (unsigned short)$a_value
			]"
		ensure
			tabletype_set: a_value = c_tabletype (an_item)
		end

	c_dictionary (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <lz4.h>"
		alias
			"[
				((struct LZ4_stream_t_internal*)$an_item)->dictionary
			]"
		end

	set_c_dictionary (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <lz4.h>"
		alias
			"[
				((struct LZ4_stream_t_internal*)$an_item)->dictionary =  (unsigned char const*)$a_value
			]"
		ensure
			dictionary_set: a_value = c_dictionary (an_item)
		end

	c_dictctx (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <lz4.h>"
		alias
			"[
				((struct LZ4_stream_t_internal*)$an_item)->dictCtx
			]"
		end

	set_c_dictctx (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <lz4.h>"
		alias
			"[
				((struct LZ4_stream_t_internal*)$an_item)->dictCtx =  (LZ4_stream_t_internal const*)$a_value
			]"
		ensure
			dictctx_set: a_value = c_dictctx (an_item)
		end

	c_dictsize (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <lz4.h>"
		alias
			"[
				((struct LZ4_stream_t_internal*)$an_item)->dictSize
			]"
		end

	set_c_dictsize (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <lz4.h>"
		alias
			"[
				((struct LZ4_stream_t_internal*)$an_item)->dictSize =  (unsigned int)$a_value
			]"
		ensure
			dictsize_set: a_value = c_dictsize (an_item)
		end

end
